--- st.c
+++ st.c
@@ -1272,93 +1109,89 @@ tsetchar(Rune u, const Glyph *attr, int x, int y)
 	} else if (term.line[y][x].mode & ATTR_WDUMMY) {
 		term.line[y][x-1].u = ' ';
 		term.line[y][x-1].mode &= ~ATTR_WIDE;
-  }
+	}
 
 	term.dirty[y] = 1;
 	term.line[y][x] = *attr;
 	term.line[y][x].u = u;
-	term.line[y][x].mode |= ATTR_SET;
 }
 
 void
-tclearglyph(Glyph *gp, int usecurattr)
+tclearregion(int x1, int y1, int x2, int y2)
 {
-	if (usecurattr) {
-		gp->fg = term.c.attr.fg;
-		gp->bg = term.c.attr.bg;
-	} else {
-		gp->fg = defaultfg;
-		gp->bg = defaultbg;
-	}
-	gp->mode = ATTR_NULL;
-	gp->u = ' ';
-}
+	int x, y, temp;
+	Glyph *gp;
 
-void
-tclearregion(int x1, int y1, int x2, int y2, int usecurattr)
-{
-	int x, y;
+	if (x1 > x2)
+		temp = x1, x1 = x2, x2 = temp;
+	if (y1 > y2)
+		temp = y1, y1 = y2, y2 = temp;
 
-	/* regionselected() takes relative coordinates */
-	if (regionselected(x1+term.scr, y1+term.scr, x2+term.scr, y2+term.scr))
-		selremove();
+	LIMIT(x1, 0, term.col-1);
+	LIMIT(x2, 0, term.col-1);
+	LIMIT(y1, 0, term.row-1);
+	LIMIT(y2, 0, term.row-1);
 
 	for (y = y1; y <= y2; y++) {
 		term.dirty[y] = 1;
-		for (x = x1; x <= x2; x++)
-			tclearglyph(&term.line[y][x], usecurattr);
+		for (x = x1; x <= x2; x++) {
+			gp = &term.line[y][x];
+			if (selected(x, y))
+				selclear();
+			gp->fg = term.c.attr.fg;
+			gp->bg = term.c.attr.bg;
+			gp->mode = 0;
+			gp->u = ' ';
+		}
 	}
 }
 
 void
 tdeletechar(int n)
 {
-	int src, dst, size;
-	Line line;
+	int dst, src, size;
+	Glyph *line;
+
+	LIMIT(n, 0, term.col - term.c.x);
 
-	if (n <= 0)
-		return;
 	dst = term.c.x;
-	src = MIN(term.c.x + n, term.col);
+	src = term.c.x + n;
 	size = term.col - src;
-	if (size > 0) { /* otherwise src would point beyond the array
-	                   https://stackoverflow.com/questions/29844298 */
-		line = term.line[term.c.y];
-		memmove(&line[dst], &line[src], size * sizeof(Glyph));
-	}
-	tclearregion(dst + size, term.c.y, term.col - 1, term.c.y, 1);
+	line = term.line[term.c.y];
+
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(term.col-n, term.c.y, term.col-1, term.c.y);
 }
 
 void
 tinsertblank(int n)
 {
-	int src, dst, size;
-	Line line;
+	int dst, src, size;
+	Glyph *line;
 
-	if (n <= 0)
-		return;
-	dst = MIN(term.c.x + n, term.col);
+	LIMIT(n, 0, term.col - term.c.x);
+
+	dst = term.c.x + n;
 	src = term.c.x;
 	size = term.col - dst;
-	if (size > 0) { /* otherwise dst would point beyond the array */
-		line = term.line[term.c.y];
-		memmove(&line[dst], &line[src], size * sizeof(Glyph));
-	}
-	tclearregion(src, term.c.y, dst - 1, term.c.y, 1);
+	line = term.line[term.c.y];
+
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(src, term.c.y, dst - 1, term.c.y);
 }
 
 void
 tinsertblankline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrolldown(term.c.y, n);
+		tscrolldown(term.c.y, n, 0);
 }
 
 void
 tdeleteline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrollup(term.c.y, term.bot, n, SCROLL_NOSAVEHIST);
+		tscrollup(term.c.y, n, 0);
 }
 
 int32_t
